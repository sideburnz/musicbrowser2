<?xml version="1.0" encoding="utf-8"?>
<!-- These variables define the Windows Installer product version, product code and upgrade code. They   -->
<!-- will be used later on in this file.                                                                 -->
<?define Property_ProductVersion = "2.3.0.5" ?>
<!-- update the product code each release -->
<?define Property_ProductCode = "C77E70F3-0257-4164-978C-3FA36E9AF32E" ?>
<!-- The UpgradeCode always stays the same -->
<?define Property_UpgradeCode = "4A6C2640-2292-4011-926C-7CC9025DE751" ?>

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Product Id="$(var.Property_ProductCode)" UpgradeCode="$(var.Property_UpgradeCode)" Name="!(loc.Property_ProductName)" Language="!(loc.Property_ProductLanguage)" Version="$(var.Property_ProductVersion)" Manufacturer="!(loc.Property_CompanyName)">
    <Package Id='*' Description="!(loc.Package_Description)" Comments="!(loc.Package_Comments)" InstallerVersion="200" Compressed="yes" InstallPrivileges="elevated" />
        <!-- This information enables Windows Installer major upgrade functionality so users can seamlessly  -->
        <!-- install a new version of the product and have the old version automatically uninstall behind    -->
        <!-- the scenes. See the following topic in the MSDN Library for additional information:             -->
        <!-- http://msdn.microsoft.com/library/default.asp?url=/library/en-us/msi/setup/major_upgrades.asp   -->
        <Upgrade Id="$(var.Property_UpgradeCode)">
            <!--this will allow the current installer to upgrade an older version-->
            <UpgradeVersion Property="OLDERVERSIONBEINGUPGRADED" Minimum="2.1.0.0" IncludeMinimum="yes" Maximum="$(var.Property_ProductVersion)" IncludeMaximum="no" />
            <!--this will prevent out-of-order installations-->
            <UpgradeVersion Property="NEWERVERSIONDETECTED" Minimum="$(var.Property_ProductVersion)" OnlyDetect="yes" />
        </Upgrade>
        <!-- This custom action prevents users from installing if a newer version of this product is already -->
        <!-- installed on the system. This is a part of Windows Installer major upgrade functionality.       -->
        <CustomAction Id="CA_BlockOlderVersionInstall" Error="!(loc.LaunchCondition_NewerVersion)" />
        <!-- This custom action prevents users from installing this product on unsupported operating system  -->
        <!-- versions. The conditions that are checked for operating system version are defined below.       -->
        <CustomAction Id="CA_ErrWrongWindowsVersion" Error="!(loc.LaunchCondition_WrongOSVersion)" />
        <!-- This condition adds an item to the LaunchCondition table of the MSI to block a user from        -->
        <!-- installing this product unless they have administrative privileges on the system.               -->
        <Condition Message="!(loc.LaunchCondition_AdminPrivs)"><![CDATA[Privileged]]></Condition>
        <!-- this ensures .Net 3.5 is installed -->
        <!--
    <PropertyRef Id="NETFRAMEWORK35" />
    <Condition Message="!(loc.LaunchCondition_WrongDotNetFramework)">
      <![CDATA[Installed OR NETFRAMEWORK35]]>
    </Condition>-->
        <!-- This is a list of directories that are used by this product as installation locations or custom -->
        <!-- action file search locations.                                                                   -->
        <Directory Id="TARGETDIR" Name="SourceDir">
            <Directory Id="WindowsFolder" Name="WINDOWS">
                <Directory Id="EhomeFolder" Name="eHome" />
            </Directory>
            <Directory Id="ProgramFilesFolder" Name="Program Files">
                <Directory Id="MyCompany" Name="Joocer">
                    <Directory Id="APPROOTDIRECTORY" Name="MusicBrowser" />
                </Directory>
            </Directory>
            <!--<Directory Id="ProgramMenuFolder">
        <Directory Id="ApplicationProgramsFolder" Name="MusicBrowser 2" />
      </Directory>-->
            <Directory Id="TEMPDIR" Name="TempFolder" />
            <Directory Id="CommonAppDataFolder">
                <Directory Id="MBFolder" Name="MusicBrowser">
                    <Directory Id="MBLogs" Name="Logs" />
                    <Directory Id="MBPlugin" Name="PlugIn" />
		    <Directory Id="MBComponents" Name="Components" />
                    <Directory Id="MBCollections" Name="Collections" />
                    <Directory Id="MBIBN" Name="IBN" />
                    <Directory Id="MBCache" Name="Cache">
                        <Directory Id="MBCacheImages" Name="Images" />
                    </Directory>
                </Directory>
            </Directory>
        </Directory>
        <!-- For some reason we need to set the Icon Id to an exe, otherwise the .ico file cannot be used for shortcuts. -->
        <Icon Id="MusicBrowser2.exe" SourceFile="MusicBrowser2.ico" />
        <!--<DirectoryRef Id="ApplicationProgramsFolder">
      <Component Id="OptionalStartmenuFolderShortcut" Guid="BE717AEA-F75B-43c7-9C94-510CA3F0F77E">
        <Shortcut Id="MusicBrowerStartmenu"
                  Name="MusicBrowser 2"
                  Description="MusicBrowser 2"
                  Target="[EhomeFolder]ehshell.exe"
                  Arguments="/nostartupanimation /entrypoint:{46572B5B-2B75-40B3-B48A-F7A308846CB7}\{49233D7D-3063-4B89-801E-C038ADEE6EF9}"
                  WorkingDirectory="EhomeFolder"
                  Icon="MusicBrowser2.exe"
                  IconIndex="0"/>
      </Component>
    </DirectoryRef>-->

        <DirectoryRef Id="APPROOTDIRECTORY">
            <Component Id="MusicBrowser.dll" Guid="85C40CED-7E80-4c28-81B2-460D0EE36B7C" DiskId="1">
                <File Id="MusicBrowser.dll" Name="MusicBrowser.dll" KeyPath="yes" Source="..\musicbrowser2\bin\$(var.BuildType)\MusicBrowser.dll" Checksum="yes" Vital="yes" Assembly=".net" />
            </Component>
            <Component Id="Registration.xml" Guid="4A3CDC8E-7136-4c22-A997-94266AF1C6C3" DiskId="1">
                <File Id="Registration.xml" Name="Registration.xml" Source="..\setup\Registration.xml" Checksum="no" />
            </Component>
            <Component Id="Application.png" Guid="8FB0598C-AA09-46c3-A04B-E5748141D5AB" DiskId="1">
                <File Id="Application.png" Name="Application.png" Source="..\resource\application\Music-256x256.png" Checksum="no" />
            </Component>
            <Component Id="MusicBrowser2.ico" Guid="25C6DD59-8881-42b4-B302-A616F747C99E" DiskId="1">
                <File Id="MusicBrowser2.ico" Name="MusicBrowser2.ico" Source="MusicBrowser2.ico" Checksum="no" />
            </Component>
            <Component Id="ServiceStack.Text.dll" Guid="42755573-7845-4041-98AD-19B3A5871DB4" DiskId="1">
              <File Id="ServiceStack.Text.dll" Name="ServiceStack.Text.dll" KeyPath="yes" Source="..\resource\ServiceStack.Text.dll" Checksum="yes" Vital="yes" Assembly=".net" />
            </Component>
        </DirectoryRef>
        <!-- This component is installed so the default ProgramData\MusicBrowser is created during installerion -->
        <!-- together with the correct permissions (Users group with full control)                              -->
        <!-- As long as there is content in the folder, it will not be removed during uninstallation            -->
        <DirectoryRef Id="MBFolder">
          <Component Id="MBProgramDataFolder" Guid="43D322E8-ABF5-48ee-B37E-C12CA86603E7">
            <CreateFolder>
              <Permission User="Everyone" GenericRead="yes" Read="yes" GenericExecute="yes" ChangePermission="yes" CreateChild="yes" CreateFile="yes" GenericAll="yes" />
            </CreateFolder>
          </Component>
        </DirectoryRef>

        <DirectoryRef Id="MBComponents">
          <Component Id="MBComponentFolder" Guid="3FE1E410-13F6-44FC-AEE9-4E2AA4551E8F">
            <CreateFolder>
              <Permission User="Everyone" GenericRead="yes" Read="yes" GenericExecute="yes" ChangePermission="yes" CreateChild="yes" CreateFile="yes" GenericAll="yes" />
            </CreateFolder>
          </Component>
          <Component Id="MediaInfo.dll.32" Guid="E15B2F2E-6E55-4E08-B725-05FE2F71F7BD" DiskId="1">
            <File Id="MediaInfo.dll.32" Name="MediaInfo.dll.32" KeyPath="yes" Source="..\resource\MediaInfo.dll.32" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="MediaInfo.dll.64" Guid="643B3215-7477-4583-8E1B-BF7A24A0669E" DiskId="1">
            <File Id="MediaInfo.dll.64" Name="MediaInfo.dll.64" KeyPath="yes" Source="..\resource\MediaInfo.dll.64" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="System.Data.SQLite.dll.32" Guid="D6E26A86-D7A5-424F-921D-CAB83698E58E" DiskId="1">
            <File Id="System.Data.SQLite.dll.32" Name="System.Data.SQLite.dll.32" KeyPath="yes" Source="..\resource\System.Data.SQLite.dll.32" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="System.Data.SQLite.dll.64" Guid="35C9A38F-469A-4C2A-A1AF-14E6A6FDBB4C" DiskId="1">
            <File Id="System.Data.SQLite.dll.64" Name="System.Data.SQLite.dll.64" KeyPath="yes" Source="..\resource\System.Data.SQLite.dll.64" Checksum="yes" Vital="no" />
          </Component>
        </DirectoryRef>

        <DirectoryRef Id="MBPlugin">
          <Component Id="MBPlugInFolder" Guid="917B9F7C-216C-4808-A811-6D257C2BEF8C">
            <CreateFolder>
              <Permission User="Everyone" GenericRead="yes" Read="yes" GenericExecute="yes" ChangePermission="yes" CreateChild="yes" CreateFile="yes" GenericAll="yes" />
            </CreateFolder>
          </Component>
          <Component Id="PlugIn.MediaBrowserXMLReader.dll" Guid="0A8AFA8C-8C79-43F9-BE2F-04996CEBF12A" DiskId="1">
            <File Id="PlugIn.MediaBrowserXMLReader.dll" Name="PlugIn.MediaBrowserXMLReader.dll" KeyPath="yes" Source="..\resource\plugins\PlugIn.MediaBrowserXMLReader.dll" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="PlugIn.FileSystem.dll" Guid="0B5F66D4-0BD3-468C-BE2C-0F588D19FBA7" DiskId="1">
            <File Id="PlugIn.FileSystem.dll" Name="PlugIn.FileSystem.dll" KeyPath="yes" Source="..\resource\plugins\PlugIn.FileSystem.dll" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="PlugIn.BasicViews.dll" Guid="FA10358A-58AC-432D-BC74-90137CFEC8F0" DiskId="1">
            <File Id="PlugIn.BasicViews.dll" Name="PlugIn.BasicViews.dll" KeyPath="yes" Source="..\resource\plugins\PlugIn.BasicViews.dll" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="PlugIn.HTBackdrop.dll" Guid="B207952B-91C0-4DEA-A594-84BD987455AD" DiskId="1">
            <File Id="PlugIn.HTBackdrop.dll" Name="PlugIn.HTBackdrop.dll" KeyPath="yes" Source="..\resource\plugins\PlugIn.HTBackdrop.dll" Checksum="yes" Vital="no" />
          </Component>
          <Component Id="PlugIn.LastFMProvider.dll" Guid="B61BD5EE-48C3-444B-9E51-0AC5E9022425" DiskId="1">
            <File Id="PlugIn.LastFMProvider.dll" Name="PlugIn.LastFMProvider.dll" KeyPath="yes" Source="..\resource\plugins\PlugIn.LastFMProvider.dll" Checksum="yes" Vital="no" />
          </Component>

          <Component Id="Theme.White.dll" Guid="07230CD4-390F-401A-BA0D-3F4C7C84BAAE" DiskId="1">
            <File Id="Theme.White.dll" Name="Theme.White.dll" KeyPath="yes" Source="..\resource\plugins\Theme.White.dll" Checksum="yes" Vital="no" />
          </Component>
        </DirectoryRef>

        <!-- This is a list of features that are installed as a part of this product. In this case, there is -->
        <!-- only one feature. Each feature contains a list of components that it will install. Features can -->
        <!-- can be displayed and allow user selection in setup UI if desired.                               -->
        <Feature Id="APPROOTFEATURE" Title="MusicBrowser" Level="1">
            <ComponentRef Id="MusicBrowser.dll" />
            <ComponentRef Id="Registration.xml" />
            <ComponentRef Id="Application.png" />
            <ComponentRef Id="MusicBrowser2.ico" />
            <ComponentRef Id="ServiceStack.Text.dll" />

            <ComponentRef Id="MBProgramDataFolder" />
            <ComponentRef Id="MBPlugInFolder" />
	          <ComponentRef Id="MBComponentFolder" />

            <ComponentRef Id="MediaInfo.dll.32" />
            <ComponentRef Id="MediaInfo.dll.64" />
            <ComponentRef Id="System.Data.SQLite.dll.32" />
            <ComponentRef Id="System.Data.SQLite.dll.64" />

            <ComponentRef Id="PlugIn.MediaBrowserXMLReader.dll" />
            <ComponentRef Id="PlugIn.FileSystem.dll" />
            <ComponentRef Id="PlugIn.BasicViews.dll" />
            <ComponentRef Id="PlugIn.HTBackdrop.dll" />
            <ComponentRef Id="PlugIn.LastFMProvider.dll" />
          
            <ComponentRef Id="Theme.White.dll" />
            <!--<ComponentRef Id="OptionalStartmenuFolderShortcut" />-->
        </Feature>
        <!-- The media table defines the location that the MSI will look to find source files during         -->
        <!-- installation or repair scenarios. In this case, the source files are in a cab file that will be -->
        <!-- embedded directly into the MSI at build time.                                                   -->
        <Media Id="1" Cabinet="Application.cab" EmbedCab="yes" />
        <!-- These custom actions are used to register the application with Media Center using the utility   -->
        <!-- RegisterMceApp.exe that is installed as a part of the Windows Media Center feature. Each custom -->
        <!-- action is defined as a pair in order to leverage the WiX QtExec custom action to suppress the   -->
        <!-- pop-up UI that would ordinarily appear when running RegisterMceApp.exe. Registering a Windows   -->
        <!-- Media Center application will fail if it is already registered, so this setup will first        -->
        <!-- unregister the application and then attempt to re-register it. This setup ignores the return    -->
        <!-- code from the unregistration custom action but checks the return code of the registration       -->
        <!-- action. If registration fails, setup will fail and roll back. These custom actions use the      -->
        <!-- REGISTERMCEAPP property that is defined below in order to find the exact location of the file   -->
        <!-- RegisterMceApp.exe on the system.                                                               -->
        <CustomAction Id="CA_RegisterMceApp_Unregister_Install_Cmd" Property="CA_RegisterMceApp_Unregister_Install" Value="&quot;[REGISTERMCEAPP]&quot; /u /allusers &quot;[#Registration.xml]&quot;" />
        <CustomAction Id="CA_RegisterMceApp_Unregister_Uninstall_Cmd" Property="CA_RegisterMceApp_Unregister_Uninstall" Value="&quot;[REGISTERMCEAPP]&quot; /u /allusers &quot;[#Registration.xml]&quot;" />
        <CustomAction Id="CA_RegisterMceApp_Register_Cmd" Property="CA_RegisterMceApp_Register" Value="&quot;[REGISTERMCEAPP]&quot; /allusers &quot;[#Registration.xml]&quot;" />
        <CustomAction Id="CA_RegisterMceApp_Rollback_Cmd" Property="CA_RegisterMceApp_Rollback" Value="&quot;[REGISTERMCEAPP]&quot; /u /allusers &quot;[#Registration.xml]&quot;" />
        <CustomAction Id="CA_RegisterMceApp_Unregister_Install" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
        <CustomAction Id="CA_RegisterMceApp_Unregister_Uninstall" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred" Return="ignore" Impersonate="no" />
        <CustomAction Id="CA_RegisterMceApp_Register" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred" Return="check" Impersonate="no" />
        <CustomAction Id="CA_RegisterMceApp_Rollback" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="rollback" Return="ignore" Impersonate="no" />
        <!-- The InstallExecuteSequence table describes the order that actions will be executed during       -->
        <!-- installation, repair and uninstall of this product.                                             -->
        <InstallExecuteSequence>
            <Custom Action="CA_BlockOlderVersionInstall" After="FindRelatedProducts"><![CDATA[NEWERVERSIONDETECTED]]></Custom>
            <RemoveExistingProducts After="InstallValidate" />
            <LaunchConditions After="AppSearch" />
            <!-- This custom action searches for Windows version 6.0, the Windows Media Center Ident registry  -->
            <!-- value 5.0 and the presence of the file %windir%\eHome\RegisterMceApp.exe. If all of these     -->
            <!-- conditions are met, the system is a Windows Vista Home Premium or Ultimate Edition operating  -->
            <!-- system and the product will be allowed to install.                                            -->
            <Custom Action="CA_ErrWrongWindowsVersion" Before="CostInitialize"><![CDATA[(NOT VersionNT >= 601 OR NOT REGISTERMCEAPP) AND NOT Installed]]></Custom>
            <Custom Action="CA_RegisterMceApp_Unregister_Install_Cmd" After="CostFinalize"><![CDATA[NOT REMOVE]]></Custom>
            <Custom Action="CA_RegisterMceApp_Unregister_Uninstall_Cmd" After="CA_RegisterMceApp_Unregister_Install_Cmd"><![CDATA[(REMOVE) AND (NOT UPGRADINGPRODUCTCODE)]]></Custom>
            <Custom Action="CA_RegisterMceApp_Register_Cmd" After="CA_RegisterMceApp_Unregister_Uninstall_Cmd"><![CDATA[NOT REMOVE]]></Custom>
            <Custom Action="CA_RegisterMceApp_Rollback_Cmd" After="CA_RegisterMceApp_Register_Cmd"><![CDATA[NOT REMOVE]]></Custom>
            <!-- This unregistration custom action must occur before files are removed during uninstall of the -->
            <!-- product because the custom action requires the registration XML file in order to run          -->
            <!-- correctly. It is conditioned to only run during uninstall using the REMOVE condition.         -->
            <Custom Action="CA_RegisterMceApp_Unregister_Uninstall" Before="RemoveFiles"><![CDATA[REMOVE]]></Custom>
            <!-- This sequence of actions is important. In order to allow the roll back custom action to run   -->
            <!-- at the correct time in case the setup fails, it must be scheduled before the other actions    -->
            <!-- because Windows Installer pushes each action onto a stack and then pops them off of the stack -->
            <!-- in case of any failure in order to accomplish the roll back.                                  -->
            <Custom Action="CA_RegisterMceApp_Rollback" After="InstallFiles"><![CDATA[NOT REMOVE]]></Custom>
            <Custom Action="CA_RegisterMceApp_Unregister_Install" After="CA_RegisterMceApp_Rollback"><![CDATA[NOT REMOVE]]></Custom>
            <Custom Action="CA_RegisterMceApp_Register" After="CA_RegisterMceApp_Unregister_Install"><![CDATA[NOT REMOVE]]></Custom>
        </InstallExecuteSequence>
        <!-- The InstallUISequence table describes the order that actions will be executed when the user     -->
        <!-- runs setup in full UI mode. Some actions must be scheduled in the UI and the execute sequence   -->
        <!-- tables to ensure that they will run regardless of whether the user runs setup in full UI mode   -->
        <!-- or in reduced UI or silent modes.                                                               -->
        <InstallUISequence>
            <Custom Action="CA_BlockOlderVersionInstall" After="FindRelatedProducts"><![CDATA[NEWERVERSIONDETECTED]]></Custom>
            <Custom Action="CA_ErrWrongWindowsVersion" Before="CostInitialize"><![CDATA[(NOT VersionNT >= 600 OR NOT MCEINSTALLVERSION >= "5.0" OR NOT REGISTERMCEAPP) AND NOT Installed]]></Custom>
        </InstallUISequence>
        <!-- These properties define links that will appear in the Add/Remove Programs control panel when    -->
        <!-- this product is installed on the system.                                                        -->
        <Property Id="ARPHELPLINK" Value="!(loc.Property_ArpHelpLink)" />
        <Property Id="ARPURLINFOABOUT" Value="!(loc.Property_ArpUrlInfoAbout)" />
        <Property Id="ARPPRODUCTICON" Value="MusicBrowser2.exe" />
        <!-- This property defines the ALLUSERS property to be 1, which indicates that this product will be  -->
        <!-- installed per-machine instead of per-user.                                                      -->
        <Property Id="ALLUSERS"><![CDATA[1]]></Property>
        <!-- This property uses a registry locator to determine the version of Windows Media Center present  -->
        <!-- on the system (if any). This registry-based version detection algorithm is documented in the    -->
        <!-- Windows Media Center SDK for Windows Vista.                                                     -->
        <Property Id="MCEINSTALLVERSION" Secure="yes">
            <RegistrySearch Id="MceInstallRegKey" Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Media Center" Name="Ident" Type="raw" />
        </Property>
        <!-- This property uses an AppSearch to attempt to locate the file %windir\eHome\ehShell.exe  on the -->
        <!-- system. If it is found, the property is set to the fully qualified path to this file, and this  -->
        <!-- path is used to create a desktop shortcut to launch the application in Windows Media Center.    -->
        <!-- JJ
    <Property Id="EHSHELLEXE" Secure="yes">
			<DirectorySearch Id="EhomeDirectory" Path="[WindowsFolder]\ehome">
				<FileSearch Id="EhShellExe" Name="ehShell.exe" MinVersion="6.0.0.0" />
			</DirectorySearch>
		</Property>-->
        <!-- This property uses an AppSearch to attempt to locate the file %windir\eHome\RegisterMceApp.exe  -->
        <!-- on the system. If it is found, the property is set to the fully qualified path to this file,    -->
        <!-- and this path is used to call RegisterMceApp.exe in several custom actions listed above to      -->
        <!-- register this application with Windows Media Center.                                            -->
        <Property Id="REGISTERMCEAPP" Secure="yes">
            <DirectorySearch Id="EhomeDirectory" Path="[WindowsFolder]\ehome">
                <FileSearch Id="RegisterMceAppExe" Name="RegisterMceApp.exe" />
            </DirectorySearch>
        </Property>
        <!-- This property is used as the default installation directory, and the user can change this path  -->
        <!-- during setup. The Id must be set to WIXUI_INSTALLDIR and the value must match the directory Id  -->
        <!-- defined above that represents the root installation directory.                                  -->
        <Property Id="WIXUI_INSTALLDIR" Value="APPROOTDIRECTORY" />
        <!-- This UIRef element specifies what WiXUI dialog set to use for the setup UI. This package uses   -->
        <!-- the WixUI_InstallDir dialog set, which provides a welcome page, a license agreement page, a     -->
        <!-- page to allow changing the installation path, an installation confirmation page, a progress     -->
        <!-- page and a completion page. Other dialog sets are available in the WiX toolset and are          -->
        <!-- described in more detail in the WiX documentation.                                              -->
        <UIRef Id="WixUI_InstallDir" />
        <!-- In WiX v3.0, this variable is used to override the default license agreement text that is       -->
        <!-- included in the WixUIExtension with a custom file.                                              -->
        <WixVariable Id="WixUILicenseRtf" Value="License.rtf" />
        <WixVariable Id="WixUIBannerBmp" Value="Images\header.bmp" />
        <WixVariable Id="WixUIDialogBmp" Value="Images\dialog.bmp" />
        <UI />
    </Product>
</Wix>